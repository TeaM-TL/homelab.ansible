---
- name: 'deploy VMs'

  hosts: 'gold.lan.nathancurry.com'
  gather_facts: false

  # Set which host groups to deploy as containers and as VMs
  vars:
    deploy_vms: "{{ groups['ipaservers'] }}"

  handlers:
  - name: 'sleep'
    pause:
      seconds: 10

  tasks:
  - name: Load relevant secrets
    include_vars: "~/0/vault/proxmox.yml"
    no_log: false

  - name: 'include vars'
    include_vars: '../vars/main.yml'

  - name: 'enable TFTP server'
    service:
      name: 'tftp'
      state: 'started'
    delegate_to: '{{ tftp_server }}'

  - name: 'create vms from clone'
    proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ api_host }}"
      vmid: '{{ hostvars[item].vmid }}'
      node: '{{ hostvars[item].proxmox_node }}'
      name: '{{ hostvars[item].inventory_hostname }}'
      cores: '{{ hostvars[item].cores | default(defaults.cores) }}'
      net: "{{ '{\"net0\":\"virtio=' + hostvars[item].mac_address + ',bridge=vmbr0\"}' | default(defaults.netif) }}"
      virtio: '{{ hostvars[item].virtio | default(defaults.virtio) }}'
      vga: 'qxl'
      memory: '{{ hostvars[item].memory | default(defaults.memory.vm) }}'
      storage: '{{ hostvars[item].storage | default(defaults.storage.gluster) }}'
      onboot: '{{ hostvars[item].onboot | default(defaults.onboot) }}'
      state: 'present'
    with_items: "{{ deploy_vms }}"
    loop_control:
      pause: 5
    notify:
      - 'sleep'
    register: 'created_vms_pve'


  - meta: 'flush_handlers'
    when: 'created_vms_pve.changed'

  - name: 'start VMs'
    proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ api_host }}"
      node: "{{ item['invocation']['module_args']['node'] }}"
      name: "{{ item['item'] }}"
      state: 'started'
    with_items: "{{ created_vms_pve.results }}"
    notify:
      - 'sleep'
    #when: 'item.changed'


  - meta: 'flush_handlers'
    when: 'created_vms_pve.changed'

  - name: 'disable TFTP server'
    service:
      name: 'tftp'
      state: 'started'
    delegate_to: '{{ tftp_server }}'
